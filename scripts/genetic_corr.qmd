---
output: html_document
execute: 
  freeze: auto
editor_options: 
  chunk_output_type: console
---
# Heritability & Genetic Correlations {.unnumbered}


```{r}
#| label: packages
#| code-fold: true
#| code-summary: Load R Packages
#| warning: false
#| error: false
#| message: false
#| eval: false

library(tidyverse)    # Data wrangling 
library(GenomicSEM)  

```

## Methods 
### Tools & Publications 
R, [GenomicSEM](https://rpubs.com/MichelNivard/640145), [LDSC](https://github.com/bulik/ldsc), [HDL](https://github.com/zhenin/HDL)

- Bulik-Sullivan, B. et al. An atlas of genetic correlations across human diseases and traits. [Nat Genet 47, 1236–1241 (2015)](https://www.nature.com/articles/ng.3406).
- Ning, Z., Pawitan, Y. & Shen, X. High-definition likelihood inference of genetic correlations across human complex traits. [Nat Genet 52, 859–864 (2020)](https://pubmed.ncbi.nlm.nih.gov/32601477/).

Genetic correlation (rg) refers to the degree to which the genetic determinants of two traits overlap - the proportion of variance that two traits share due to genetic causes. A positive genetic correlation between two traits implies that the same genetic variants are influencing both traits in the same direction. Conversely, a negative genetic correlation implies that the genetic variants influencing one trait are having the opposite effect on the other trait. 

**LDSC:** Linkage disequilibrium score regression (LDSC) leverages linkage disequilibrium (LD), the non-random association of alleles at different loci, to estimate genetic correlations between two traits. This method operates on the premise that single nucleotide polymorphisms (SNPs) with a higher count of LD partners (thus having a higher LD score) are typically more associated with a trait due to polygenicity, a condition where numerous genetic variants each exert a minor effect.


**HDL:** High-definition likelihood (HDL) provides genetic correlation estimates that have higher accuracy and precision compared to LDSC. HDL achives this by using a full likelihood-based method that leverages LD information across the whole genome, where as LDSC only use partial information. 


## Munge
Here we will be using LDSC and HDL implemented using [GenomicSEM](https://github.com/GenomicSEM/GenomicSEM) - make sure to have it installed. 

You will need to make sure the following summary statistics are in `resources/genetic_epi/summary_statistics/`

- `Willer2013ldl.chrall.CPRA_b37.tsv.gz`
- `Graham2021ldl.chrall.CPRA_b37.tsv.gz`
- `Kunkle2019load_stage123.chrall.CPRA_b37.tsv.gz`
- `Bellenguez2022load.chrall.CPRA_b37.tsv.gz`

::: {.callout-warning}
With large GWAS summary statistic files your local machine may run out of memory. There are also HapMap3 filtered summary statistic files avaliable

- work/summary_statistics/Willer2013ldl_hm3.tsv.gz
- work/summary_statistics/Graham2021ldl_hm3.tsv.gz
- work/summary_statistics/Kunkle2019load_hm3.tsv.gz
- work/summary_statistics/Bellenguez2022load_hm3.tsv.gz

You may also need to apply `GenomicSEM::munge` to a single summary statistic file at a time
:::

And that the LD Reference Panels are available in `resources/genetic_epi/ld_ref/`

First we need to munge the GWAS summary statistics so they are in the format required for LDSC. 


```{r}
#| label: Munge
#| code-fold: true
#| code-summary: Munge GWAS SumStats
#| warning: false
#| error: false
#| message: false
#| eval: false

## Summary statistics - full summary stats, may cause memory failure
# Willer2013ldl = "resources/genetic_epi/summary_statistics/Willer2013ldl.chrall.CPRA_b37.tsv.gz"
# Graham2021ldl = "resources/genetic_epi/summary_statistics/Graham2021ldl.chrall.CPRA_b37.tsv.gz"
# KunkleAD = "resources/genetic_epi/summary_statistics/Kunkle2019load_stage123.chrall.CPRA_b37.tsv.gz"
# BellenguezAD = "resources/genetic_epi/summary_statistics/Bellenguez2022load.chrall.CPRA_b37.tsv.gz"

## Summary statistics - HapMap3 filtered SNPs
Willer2013ldl = "work/summary_statistics/Willer2013ldl_hm3.tsv.gz"
Graham2021ldl = "work/summary_statistics/Graham2021ldl_hm3.tsv.gz"
KunkleAD = "work/summary_statistics/Kunkle2019load_hm3.tsv.gz"
BellenguezAD = "work/summary_statistics/Bellenguez2022load_hm3.tsv.gz"

## LD Structure 
ld_path = "resources/genetic_epi/ld_ref/eur_w_ld_chr/"

## HAPMAP3 SNPs
hm3_path = "resources/genetic_epi/ld_ref/w_hm3.snplist"


GenomicSEM::munge(
  files = c(Willer2013ldl, Graham2021ldl, KunkleAD, BellenguezAD), 
  hm3 = hm3_path, 
  trait.names = c("Willer2013ldl", "Graham2021ldl", "KunkleAD", "BellenguezAD"), 
  maf.filter = 0.05, 
  column.names = list(
    SNP='DBSNP_ID', 
    MAF='AF', 
    A1='ALT',
    A2='REF', 
    effect='BETA', 
    N = "N"
  ), 
  overwrite=FALSE
)

```

## LDSC 
We can then apply LDSC to estimate h2 and pairwise rg. As we are using binary outcomes, we need to specify sample and population prevalence. 

| Trait Name     | Sample Prevalence | Population Prevalence |
|----------------|-------------------|-----------------------|
| Willer2013ldl  | NA                | NA                    |
| Graham2021ldl  | NA                | NA                    |
| BellenguezAD   | 0.18              | 0.31                  |
| KunkleAD       | 0.37              | 0.31                  |


```{r}
#| label: LDSC
#| code-fold: true
#| code-summary: LDSC
#| warning: false
#| error: false
#| message: false
#| eval: false

ldsc.covstruct <- GenomicSEM::ldsc(
     traits = c("Willer2013ldl.sumstats.gz", "Graham2021ldl.sumstats.gz", "BellenguezAD.sumstats.gz", "KunkleAD.sumstats.gz"),
     trait.names = c("Willer2013ldl", "Graham2021ldl", "BellenguezAD", "KunkleAD"), 
     sample.prev = c(NA, NA, 0.18, 0.37),
     population.prev = c(NA, NA, 0.31, 0.31),
     ld = ld_path, 
     wld = ld_path,
     stand = TRUE
     )

```

```{r}
#| label: h2
#| code-fold: true
#| code-summary: h2
#| warning: false
#| error: false
#| echo: false
#| message: false
#| eval: false

h2 <- tribble(
  ~trait, ~h2, ~se,
  "Willer2013ldl", 0.0638, 0.0094,
  "Graham2021ldl", 0.075, 0.0082,
  "BellenguezAD", 0.048, 0.0072,
  "KunkleAD", 0.0971, 0.0206,
)

```

```{r}
#| label: res
#| code-fold: true
#| code-summary: h2 and rg results
#| warning: false
#| error: false
#| echo: false
#| message: false
#| eval: false

h2 <- tribble(
  ~trait, ~h2, ~se,
  "Willer2013ldl", 0.0638, 0.0094,
  "Graham2021ldl", 0.075, 0.0082,
  "BellenguezAD", 0.048, 0.0072,
  "KunkleAD", 0.0971, 0.0206,
)

rg <- tribble(
  ~trait1, ~trait2, ~rg, ~se, ~p, 
  "Willer2013ldl", "Graham2021ldl", 0.9964, 0.1219, 2.906e-16,
  "Willer2013ldl", "BellenguezAD", -0.0675, 0.0499, 0.17577,
  "Willer2013ldl", "KunkleAD", 0.0215, 0.0662, 0.74536,
  "Graham2021ldl", "KunkleAD", 0.023, 0.0082, 0.62032,
  "Graham2021ldl", "BellenguezAD", -0.0155, 0.1478, 0.64178, 
  "BellenguezAD", "KunkleAD", 0.9523, 0.1478, 1.1707e-10
)

```

## HDL
We can then apply HDL to estimate h2 and pairwise rg.

```{r}
#| label: HDL
#| code-fold: true
#| code-summary: HDL
#| warning: false
#| error: false
#| message: false
#| eval: false

hdl.covstruct <- GenomicSEM::hdl(
     traits = c("Willer2013ldl.sumstats.gz", "Graham2021ldl.sumstats.gz", "BellenguezAD.sumstats.gz", "KunkleAD.sumstats.gz"),
     trait.names = c("Willer2013ldl", "Graham2021ldl", "BellenguezAD", "KunkleAD"), 
     sample.prev = c(NA, NA, 0.18, 0.37),
     population.prev = c(NA, NA, 0.31, 0.31),
     LD.path="resources/UKB_imputed_hapmap2_SVD_eigen99_extraction/", 
     method = "piecewise"
     )

```

