---
output: html_document
execute: 
  freeze: auto
editor_options: 
  chunk_output_type: console
---
# GWAS-SS {.unnumbered}

Polygenic risk scores, Two-sample Mendelian Randomization, and Genetic Correlation methods require the use of summary statistics from genome-wide association studies, including single nucleotide polymorphisms (SNPs), beta coefficients, standard errors, p-values, and allele frequencies. However, the historical lack of standards for data content and file formats in GWAS summary statistics has resulted in heterogeneous data sets. To address this issue, standardizing and harmonizing the GWAS summary statistics is crucial before conducting MR analyses. The [GWAS Catalog](https://www.ebi.ac.uk/gwas/home) and [OpenGWAS](https://gwas.mrcieu.ac.uk/) platforms have developed formats such as GWAS-SSF (Hayhurst et al. 2022) and GWAS-VCF (Lyon et al. 2021) to facilitate sharing of GWAS SumStats. Tools like [MungeSumstats](https://neurogenomics.github.io/MungeSumstats/index.html) (Murphy et al 2021) and GWAS2VCF (Lyon et al. 2021) are available that provide rapid standardization and quality control of GWAS SumStats.

## AD GWAS 

We download the International Genomics of Alzheimer's Project (IGAP) Alzheimer’s disease GWAS of Kunkle et al. Nat Genet, 2019. from the GWAS catalouge. These summary statistics correspond to the meta-analysis results obtained in stage 1 including genotyped and imputed data (11,480,632 variants, phase 1 integrated release 3, March 2012) of 21,982 Alzheimer’s disease cases and 41,944 cognitively normal controls.


The Summary statistics consists of the following information for each SNP and its association to Alzheimer's disease based on meta-analysis in the publication mentioned below. 

- Chromosome: Chromosome of the SNP (Build 37, Assembly Hg19)
- Position: Position of the SNP (Build 37, Assembly Hg19)
- MarkerName: SNP rsID or chromosome:position:I/D if rsID not available. I/D indicates indel or deletion respectively.
- Effect_allele: Reference allele (coded allele)
- Non_Effect_allele: Non reference allele (non coded allele)
- Beta: Overall estimated effect size for the effect allele
- SE: Overall standard error for effect size estimate
- Pvalue: Meta-analysis Pvalue using regression coefficients (beta and standard error)


```{bash}
#| eval: false
#| label: Download Summary Statistics
curl https://ftp.ebi.ac.uk/pub/databases/gwas/summary_statistics/GCST007001-GCST008000/GCST007511/Kunkle_etal_Stage1_results.txt > resources/Kunkle_etal_Stage1_results.txt
```

## MungeSumstats

The MungeSumstats package is designed to facilitate the standardization of GWAS summary statistics. 


```{r}
#| eval: false
#| label: load packages
library(tidyverse)

```

```{r}
#| eval: false
#| label: Munge Summary statistics
load.raw <- read_table('resources/Kunkle_etal_Stage1_results.txt')

load <- load.raw %>%
  filter(nchar(Effect_allele) == 1 & nchar(Non_Effect_allele) == 1) %>%
  mutate(
    Ncaas = 21982,
    Nctrl = 41944,
    N = 63926
  )

reformatted <- 
  MungeSumstats::format_sumstats(path=load,
                                 ref_genome="GRCh37", 
                                 dbSNP = 144, 
                                 return_data = TRUE
                                 ) %>%
  as_tibble()

write_tsv(reformatted, 'work/Kunkle2019load.tsv.gz')
```


## Manhattan Plot

```{r}
#| eval: false
#| label: AD Manhattan Plot

load.df_p <- reformatted %>%
  filter(., P < 0.1) %>% 
  filter(., P > 1e-50) %>% 
  select(SNP, CHR, BP, P) 

don <- load.df_p %>% 
  
  # Compute chromosome size
  group_by(CHR) %>% 
  summarise(chr_len=max(BP)) %>% 
  
  # Calculate cumulative position of each chromosome
  mutate(tot=cumsum(chr_len)-chr_len) %>%
  select(-chr_len) %>%
  
  # Add this info to the initial dataset
  left_join(load.df_p, ., by=c("CHR"="CHR")) %>%
  
  # Add a cumulative position of each SNP
  arrange(CHR, BP) %>%
  mutate( BPcum=BP+tot) 

# Prepare X axis
axisdf <- don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )

# Make the plot
load.p <- ggplot(don, aes(x=BPcum, y=-log10(P))) +
    
    # Show all points
    geom_point( aes(color=as.factor(CHR)), size=0.5) +
    scale_color_manual(values = rep(c("grey50", "steelblue"), 22 )) +
    
    # custom X axis:
    scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
    scale_y_continuous(expand = c(0, 0) ) +     # remove space between plot area and x axis

    # Add highlighted points
    # geom_point(data=subset(don, is_highlight=="yes"), color="orange", size=2) +
  
    # Add label using ggrepel to avoid overlapping
    # geom_label_repel( data=subset(don, is_annotate=="yes"), aes(label=SNP), size=2) +

    # Custom the theme:
    theme_bw() +
    labs(title = "LOAD - Kunkle et al. Nature Genetics 2019") + 
    theme( 
      legend.position="none",
      panel.border = element_blank(),
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(), 
      axis.title.x = element_blank()
    )

load.p <- ggman::ggman(load.df_p, snp = "SNP", bp = "BP", chrom = "CHR", pvalue = "P", relative.positions = TRUE) + 
  labs(title = "LOAD - Kunkle et al. Nature Genetics 2019") + 
  theme_classic()
  
ggsave("results/plots/kunkle2019load_manhattan_plot.png", height = 4, width = 6, units = 'in')  
```











































